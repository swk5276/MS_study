### encoding? decoding? ###
    #   전자제품 : 전기 흐르고 안 흐르고만 표현
    #   모든 데이터는 다 전기의 흐름으로 표현 가능(모스부호)

    #   Encoding : 데이터를 전기의 흐름으로 변경
    #   ex) ㅋ => 1010101
    #   Decoding : 전기의 흐름 상태를 데이터로 변경
    #   ex) ㅎ <= 0110101

### 압축 ###
# 불필요한 띄어쓰기 땡기기


### 일반적인 PL ###
    #   compiler 방식 : 설계 => 소스 => 기계어 => 전기흐름(실행파일) => 실행
    #   프로그램 소스 전체를 한번에 기계어로 번역
    #   최종 산출물 파일 따로 존재
    #   한국어 => .py => .abcd => 실행
    #   띄어쓰기, 엔터 의미 없음

### Python [프로그래밍 언어, interpreter 방식,고급언어(자동처리)] ###
    #   띄어쓰기가 문법적 의미 있음
    #   사람 친화적(쉽다), 효율성 떨어짐
    #   프로그램 한줄 씩 기계어로 번역해서 실행
    #   => 대화식 처리 가능 => jupyternotebook 가능
    #   소스 자체가 최종 산출물, 최종 산출물 나왓는데 실행 시 에러 => 에러 잡기 힘듬
    #   설계 => 소스 => 기계어 => 전기흐름 => 실행 => 소스 다음 줄 => 기계어
    #   .py(인간의 언어) => 기계어 => 01001(컴퓨터에 저장)

### error란? : 언어의 문법에 맞지 않는 소스로 기계어로 번역 불가한 상태 ###
#   PL문법만 사용해야(기계어 번역을 위해서)
#   comment(주석) : 기계어 번역대상에서 제외

### 개발 ###
#   설계(한국어) -> 소스(인간의 언어) [중요]
#   소스 -> 기계어(컴퓨터 언어)
#   기계어 -> encoding -> 전기흐름(01010)

#   ex)저기 사과가 하나 있다. => There is an apple
#   ex)elw;afjksdlf => 번역불가(에러)

# ctrl = f5 : 실행
# alt + shift + f : 소스 정렬
# alt+화살표 위/아래 : 소스 이동
# alt + shift+ 화살표 위/아래 : 줄 복사
# ctrl + shift + k : 줄삭제
# ctrl + spaceBar : 자동 완성

print("ㅋ")
print("ㅎ")