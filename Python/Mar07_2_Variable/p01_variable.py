# 변수

# CPU(연산) RAM(저장) 
# SSD/HDD(저장[파일형태/영구보존]) GPU(그래픽 처리[cpu+ram+hdd])

# 변수
# what : ram에 데이터 저장 공간
# when : 프로그램 발생 데이터 임시저장(영구저장=> 파일저장)

# 소스  한글자 2byte => 변수 만들면 Ram 사용량 증가

# 자료형 : 데이터 타입 저장 공간 종류
# 파이썬은 자료형이 자동 => 느려짐
c = "ㅋ"
print(c,type(c),id(c)) #id : 힙영역 주소값

# 변수 생성 == 램에 공간 사용
# Ram : 재부팅 시 삭제
#   OS가 논리적으로 나눠서 관리
# stack[크기 고정] :
#   int *a=3 [C의 변수(주소값)는 스택에 저장 => 포인터를 통한 힙 접근 가능]
#   [파이썬은 stack에 변수(주소값)를 저장하고 Heap에 실제값(객체) 저장]
#   [파이썬은 가비지 컬렉터가 참조되지 않는 객체를 자동 정리]
#   프로그램 종료 시 삭제
# Heap : 
#   컴퓨터 적당한 위치에 저장[사이즈 다양] 
#   동적 메모리 할당 영역, 종료까지 유지
#   사람이 삭제해야 함 => 파이썬 자동삭제 => 가비지 컬랙션

# 32bit/64bit : stack 영역의 변수 사이즈
# 스택에 64bit 공간을 계속 차곡차곡 쌓음
# 32비트 컴퓨터는 ram을 다 못쓴다.

# BD/AI : 서버급 컴 여러대 병렬처리
#   GO : 병렬처리 특화 PL
#   ElasticSearch : 분산저장, 분석
#   Hadoop : 병렬 전처리

